<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.InstructorMapper">
    <resultMap id="InstructorResultMap" type="com.example.demo.model.Instructor">
        <id property="instructorId" column="instructor_id" />
        <result property="username" column="username" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="introContent" column="intro_content" />
    </resultMap>

    <sql id="Base_Column_List">
        instructor_id, username, email, password, intro_content
    </sql>

    <select id="findById" resultMap="InstructorResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        INSTRUCTOR
        WHERE
        instructor_id = #{instructorId}
    </select>

    <select id="findAll" resultMap="InstructorResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        INSTRUCTOR
    </select>

    <select id="findByUsername" resultMap="InstructorResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        INSTRUCTOR
        WHERE
        username = #{username}
    </select>

    <select id="existsByUsername" resultType="boolean">
        SELECT
            CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM
            INSTRUCTOR
        WHERE
            username = #{username}
    </select>

    <select id="existsByEmail" resultType="boolean">
        SELECT
            CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM
            INSTRUCTOR
        WHERE
            email = #{email}
    </select>

    <select id="findByEmail" resultMap="InstructorResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        INSTRUCTOR
        WHERE
        email = #{email}
    </select>

    <insert id="insert" parameterType="com.example.demo.model.Instructor">
        INSERT INTO INSTRUCTOR (
            instructor_id,
            username,
            email,
            password,
            intro_content
        ) VALUES (
                     #{instructorId},
                     #{username},
                     #{email},
                     #{password},
                     #{introContent}
                 )
    </insert>

    <update id="update" parameterType="com.example.demo.model.Instructor">
        UPDATE INSTRUCTOR SET
                              username = #{username},
                              email = #{email},
                              password = #{password},
                              intro_content = #{introContent}
        WHERE
            instructor_id = #{instructorId}
    </update>

    <delete id="deleteById">
        DELETE FROM INSTRUCTOR
        WHERE instructor_id = #{instructorId}
    </delete>
</mapper>