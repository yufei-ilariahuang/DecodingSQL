<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.StudentMapper">

    <!-- Dynamic query for finding students with flexible filtering -->
    <select id="findStudents" parameterType="map" resultType="com.example.demo.model.Student">
        SELECT * FROM students
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="registeredBefore != null">
                AND created_at &lt;= #{registeredBefore}
            </if>
            <if test="registeredAfter != null">
                AND created_at >= #{registeredAfter}
            </if>
            <if test="problemsSolved != null">
                AND id IN (
                SELECT student_id FROM submissions
                WHERE status = 'CORRECT'
                GROUP BY student_id
                HAVING COUNT(DISTINCT problem_id) >= #{problemsSolved}
                )
            </if>
            <if test="problemCategory != null and problemCategory != ''">
                AND id IN (
                SELECT DISTINCT s.student_id
                FROM submissions s
                JOIN problems p ON s.problem_id = p.id
                WHERE p.category = #{problemCategory}
                AND s.status = 'CORRECT'
                )
            </if>
        </where>
        <if test="orderBy != null">
            ORDER BY ${orderBy}
            <if test="orderDirection != null">
                ${orderDirection}
            </if>
        </if>
        <if test="limit != null">
            LIMIT #{limit}
            <if test="offset != null">
                OFFSET #{offset}
            </if>
        </if>
    </select>

    <!-- Get statistics for a specific student -->
    <select id="getStudentStatistics" parameterType="long" resultType="map">
        SELECT
            s.id as student_id,
            s.name as student_name,
            COUNT(DISTINCT sub.problem_id) as problems_attempted,
            SUM(CASE WHEN sub.status = 'CORRECT' THEN 1 ELSE 0 END) as problems_solved,
            AVG(sub.score) as average_score,
            (SELECT COUNT(DISTINCT p.category)
             FROM submissions sub2
                      JOIN problems p ON sub2.problem_id = p.id
             WHERE sub2.student_id = s.id AND sub2.status = 'CORRECT') as categories_mastered
        FROM
            students s
                LEFT JOIN
            submissions sub ON s.id = sub.student_id
        WHERE
            s.id = #{studentId}
        GROUP BY
            s.id, s.name
    </select>
</mapper>